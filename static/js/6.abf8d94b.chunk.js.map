{"version":3,"sources":["views/chat-box/components/send.tsx","views/chat-box/chat-box.tsx"],"names":["Send","text","handleChange","onSend","TextField","value","type","onChange","onKeyPress","e","key","style","width","margin","autoFocus","InputProps","endAdornment","InputAdornment","position","Tooltip","title","IconButton","size","onClick","fontSize","useStyles","makeStyles","sender","textDecoration","fontWeight","messageLeft","display","maxWidth","messageRight","textAlign","paddingLeft","container","height","overflow","padding","box","AlwaysScrollToBottom","elementRef","React","current","scrollIntoView","ref","ChatBox","useConnection","state","dispatch","setText","classes","Paper","className","messages","map","message","name","Typography","variant","target","trim","payload","note"],"mappings":"yQAwCeA,EA5BF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,OAClC,OACE,8BACE,cAACC,EAAA,EAAD,CACEC,MAAOJ,EACPK,KAAK,OACLC,SAAUL,EACVM,WAAY,SAACC,GACG,UAAVA,EAAEC,KAAiBP,EAAO,iBAEhCQ,MAAO,CAAEC,MAAO,MAAOC,OAAQ,SAC/BC,WAAS,EACTC,WAAY,CACVC,aACE,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACE,cAACC,EAAA,EAAD,CAASC,MAAM,OAAf,SACE,cAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,QAAS,kBAAMpB,EAAO,iBAA/C,SACE,cAAC,IAAD,CAAUqB,SAAS,sB,SCrB/BC,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,eAAgB,YAChBJ,SAAU,MACVK,WAAY,QAGdC,YAAa,CACXN,SAAU,OACVO,QAAS,eACTC,SAAU,OAEZC,aAAc,CACZT,SAAU,OACVU,UAAW,QACXC,YAAa,OAEfC,UAAW,CACTvB,OAAQ,SACRmB,SAAU,MACVK,OAAQ,QACRC,SAAU,OACVC,QAAS,oBAEXC,IAAK,KASDC,EAAuB,WAC3B,IAAMC,EAAaC,WAEnB,OADAA,aAAgB,kBAAMD,EAAWE,QAAQC,oBAClC,qBAAKC,IAAKJ,KAoDJK,EAjDkB,WAAO,IAAD,EACTC,cAApBC,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,SADsB,EAEbP,WAAuB,IAFV,mBAE9B1C,EAF8B,KAExBkD,EAFwB,KAG/BC,EAAU3B,IAYhB,OACE,eAAC,WAAD,WACE,eAAC4B,EAAA,EAAD,CAAOC,UAAWF,EAAQhB,UAA1B,UACGa,EAAMM,SAASC,KAAI,SAACC,GACnB,MAEmB,QAAjBA,EAAQC,KACN,qCACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKN,UAAWF,EAAQzB,OAA5C,SACG8B,EAAQC,OAEX,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQN,UAAWF,EAAQtB,YAA/C,SACG2B,EAAQA,aAIb,cAACE,EAAA,EAAD,CACEL,UAAWF,EAAQnB,aACnBtB,MAAO,CAAEuB,UAAW,SACpB0B,QAAQ,QAHV,SAKGH,EAAQA,aAMjB,cAAC,EAAD,OAEF,cAAC,EAAD,CAAMxD,KAAMA,EAAMC,aAjCD,SAACO,GACpB0C,EAAQ1C,EAAEoD,OAAOxD,QAgC+BF,OAvCnC,SAACG,GACVL,EAAK6D,SACPZ,EAAS,CAAE5C,KAAMA,EAAMyD,QAAS,CAAEL,KAAM,SAAUM,KAAM/D,EAAK6D,UAC7DX,EAAQ","file":"static/js/6.abf8d94b.chunk.js","sourcesContent":["import React from \"react\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport TextField from \"@material-ui/core/TextField\"\n\ntype Props = {\n  text: string\n  handleChange: (e: any) => void\n  onSend: (type: string) => void\n}\nconst Send = ({ text, handleChange, onSend }: Props) => {\n  return (\n    <div>\n      <TextField\n        value={text}\n        type=\"text\"\n        onChange={handleChange}\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") onSend(\"send-message\")\n        }}\n        style={{ width: \"80%\", margin: \"0 10%\" }}\n        autoFocus\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Tooltip title=\"Send\">\n                <IconButton size=\"small\" onClick={() => onSend(\"send-message\")}>\n                  <SendIcon fontSize=\"small\" />\n                </IconButton>\n              </Tooltip>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Send\n","import * as React from \"react\"\nimport { useConnection } from \"../../context/connection-conext\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Box from \"@material-ui/core/Box\"\nimport Paper from \"@material-ui/core/Paper\"\nimport Send from \"./components/send\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles({\n  sender: {\n    textDecoration: \"underline\",\n    fontSize: \"9pt\",\n    fontWeight: \"bold\",\n    // display: \"inline-block\",\n  },\n  messageLeft: {\n    fontSize: \"10pt\",\n    display: \"inline-block\",\n    maxWidth: \"80%\",\n  },\n  messageRight: {\n    fontSize: \"10pt\",\n    textAlign: \"right\",\n    paddingLeft: \"20%\",\n  },\n  container: {\n    margin: \"0 auto\",\n    maxWidth: \"80%\",\n    height: \"470px\",\n    overflow: \"auto\",\n    padding: \"10px 25px 0 25px\",\n  },\n  box: {},\n})\n\n//props\n//hooks\n//render props\n\ninterface Props {}\n\nconst AlwaysScrollToBottom = () => {\n  const elementRef = React.useRef<any>()\n  React.useEffect(() => elementRef.current.scrollIntoView())\n  return <div ref={elementRef} />\n}\n\nconst ChatBox: React.FC<Props> = () => {\n  const { state, dispatch } = useConnection()\n  const [text, setText] = React.useState<string>(\"\")\n  const classes = useStyles()\n\n  const onSend = (type: string) => {\n    if (text.trim()) {\n      dispatch({ type: type, payload: { name: \"prayas\", note: text.trim() } })\n      setText(\"\")\n    }\n  }\n  const handleChange = (e: any) => {\n    setText(e.target.value)\n  }\n\n  return (\n    <React.Fragment>\n      <Paper className={classes.container}>\n        {state.messages.map((message: any) => {\n          return (\n            // <Box>\n            message.name !== \"you\" ? (\n              <>\n                <Typography variant=\"h6\" className={classes.sender}>\n                  {message.name}\n                </Typography>\n                <Typography variant=\"body1\" className={classes.messageLeft}>\n                  {message.message}\n                </Typography>\n              </>\n            ) : (\n              <Typography\n                className={classes.messageRight}\n                style={{ textAlign: \"right\" }}\n                variant=\"body1\"\n              >\n                {message.message}\n              </Typography>\n            )\n            // </Box>\n          )\n        })}\n        <AlwaysScrollToBottom />\n      </Paper>\n      <Send text={text} handleChange={handleChange} onSend={onSend} />\n    </React.Fragment>\n  )\n}\n\nexport default ChatBox\n"],"sourceRoot":""}